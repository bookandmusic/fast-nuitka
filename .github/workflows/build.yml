name: Build and Release

on: 
  push:
    tags:
      - '*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get short SHA
        id: vars
        run: echo "short_sha=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV

      - name: Get date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/py-server:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/py-server:${{ env.date }}-${{ env.short_sha }}
          platforms: linux/amd64,linux/arm64

  extract-and-upload:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Get short SHA
        id: vars
        run: echo "short_sha=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV

      - name: Get date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Extract and compress /app directory for amd64
        run: |
          docker run -d --platform linux/amd64 --name extract_amd64 ${{ secrets.DOCKERHUB_USERNAME }}/py-server:${{ env.date }}-${{ env.short_sha }} sleep 10  
          docker cp extract_amd64:/app ./app_amd64
          tar -czvf app_amd64_${{ env.date }}_${{ env.short_sha }}.tar.gz -C ./app_amd64 .
          docker rm -f extract_amd64

      - name: Extract and compress /app directory for arm64
        run: |
          docker run -d --platform linux/arm64 --name extract_arm64 ${{ secrets.DOCKERHUB_USERNAME }}/py-server:${{ env.date }}-${{ env.short_sha }} sleep 10 
          docker cp extract_arm64:/app ./app_arm64
          tar -czvf app_arm64_${{ env.date }}_${{ env.short_sha }}.tar.gz -C ./app_arm64 .
          docker rm -f extract_arm64

      - name: Upload amd64 tar to release assets
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: app_amd64_${{ env.date }}_${{ env.short_sha }}.tar.gz
          artifacts: ./app_amd64_${{ env.date }}_${{ env.short_sha }}.tar.gz

      - name: Upload arm64 tar to release assets
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: app_arm64_${{ env.date }}_${{ env.short_sha }}.tar.gz
          artifacts: ./app_arm64_${{ env.date }}_${{ env.short_sha }}.tar.gz
